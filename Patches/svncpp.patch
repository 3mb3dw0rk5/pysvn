Index: include/svncpp/log_entry.hpp
===================================================================
--- include/svncpp/log_entry.hpp	(revision 7021)
+++ include/svncpp/log_entry.hpp	(working copy)
@@ -16,6 +16,7 @@
 
 // stl
 #include <string>
+#include <list>
 
 // subversion api
 #include "svn_types.h"
@@ -23,6 +24,25 @@
 
 namespace svn
 {
+
+  struct LogChangePathEntry
+  {
+    LogChangePathEntry (const char *path_,
+                        char action_,
+                        const char *copyfrom_path_,
+                        const svn_revnum_t copyfrom_revision_)
+    : path( path_ )
+    , action( action_ )
+    , copyfrom_path( copyfrom_path_ != NULL ? copyfrom_path_ : "" )
+    , copyfrom_revision( copyfrom_revision_ )
+    {
+    }
+
+    std::string path;
+    char action;
+    std::string copyfrom_path;
+    svn_revnum_t copyfrom_revision;
+  };
   struct LogEntry
   {
     LogEntry ()
@@ -44,6 +64,7 @@
     std::string author;
     std::string date;
     std::string message;
+    std::list<LogChangePathEntry> changedPaths;
   };
 }
 
Index: include/svncpp/client.hpp
===================================================================
--- include/svncpp/client.hpp	(revision 7021)
+++ include/svncpp/client.hpp	(working copy)
@@ -374,12 +374,16 @@
      *
      * @param path
      * @param revisionStart
-     * @param revisionEnd        
+     * @param revisionEnd
+     * @param discoverChangedPaths
+     * @param strictNodeHistory
      * @return a vector with log entries
      */
     const LogEntries *
     log (const char * path, const Revision & revisionStart, 
-         const Revision & revisionEnd) throw (ClientException);
+         const Revision & revisionEnd,
+         bool discoverChangedPaths=false, 
+         bool strictNodeHistory=true) throw (ClientException);
 
     /**
      * Produce diff output which describes the delta between
Index: src/svncpp/client_status.cpp
===================================================================
--- src/svncpp/client_status.cpp	(revision 7021)
+++ src/svncpp/client_status.cpp	(working copy)
@@ -42,8 +42,32 @@
   {
     LogEntries * entries = 
       (LogEntries *) baton;
-    entries->insert (entries->begin (), LogEntry(rev, author, date, msg));
 
+    // store in the order returned from subversion
+    entries->push_back( LogEntry(rev, author, date, msg) );
+    if (changed_paths != NULL)
+    {
+      LogEntry &entry = entries->back();
+
+      for (apr_hash_index_t *hi = apr_hash_first (pool, changed_paths);
+           hi != NULL;
+           hi = apr_hash_next (hi))
+      {
+        char *path;
+        void *val;
+        apr_hash_this(hi, (const void **) &path, NULL, &val);
+
+        svn_log_changed_path_t *log_item = reinterpret_cast<svn_log_changed_path_t *>( val );
+        
+        entry.changedPaths.push_back(
+              LogChangePathEntry (path,
+                                  log_item->action,
+                                  log_item->copyfrom_path,
+                                  log_item->copyfrom_rev) );
+
+      }
+    }
+
     return NULL;
   }
 
@@ -277,7 +301,8 @@
 
   const LogEntries *
   Client::log (const char * path, const Revision & revisionStart, 
-               const Revision & revisionEnd) throw (ClientException)
+               const Revision & revisionEnd, bool discoverChangedPaths,
+               bool strictNodeHistory ) throw (ClientException)
   {
     Targets target (path);
     Pool pool;
@@ -287,8 +312,8 @@
       target.array (pool), 
       revisionStart.revision (), 
       revisionEnd.revision (), 
-      0, // not reverse by default
-      1, // strict by default (not showing cp info)
+      discoverChangedPaths ? 1 : 0,
+      strictNodeHistory ? 1 : 0,
       logReceiver,
       entries, 
       *m_context, // client ctx
